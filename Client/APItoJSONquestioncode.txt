import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { studyGroups } from "./Data";
import "./tests.css";

// Import GoogleGenerativeAI library and necessary constants
const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

// Define your API key and model name
const API_KEY = "AIzaSyDb8BHYwjuA0B6oalqrwwluPuPvOVhJQeA";
const MODEL_NAME = "gemini-1.0-pro";

function Tests() {
  const { id } = useParams();
  const group = studyGroups.find((group) => group.StudyGroupId === parseInt(id));
  const [questions, setQuestions] = useState([]);

  const generateQuestions = async (topic) => {
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });
  
    const generationConfig = {
      temperature: 0.9,
      topK: 1,
      topP: 1,
      maxOutputTokens: 2048,
    };
  
    // Safety settings to avoid harmful content
    const safetySettings = [
      {
        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
    ];
  
    const chat = model.startChat({
      generationConfig,
      safetySettings,
      history: [],
    });
  
    // Send the topic name as user input to generate questions
    const result = await chat.sendMessage(`Create 10 questions for the ${topic} chapter for student-level assessments. Provide multiple-choice options for each question and indicate the correct answer. Each question is worth 2 marks. Format the questions and options for Google Forms. Provide the response in JSON format.`);
  
    // Log the response from the API
    console.log("Response from API:", result.response.text());
  
    // Check if the response contains valid JSON data
    try {
      const response = JSON.parse(result.response.text());
  
      // Create a new Google Form for the topic
      const form = FormApp.create(`${topic} Questions`);
  
      // Populate the form with the generated questions
      response.forEach((question) => {
        const newItem = form.addMultipleChoiceItem();
        newItem.setTitle(question.question);
        newItem.setChoiceValues(question.options);
      });
  
      // Log the form URL in the console
      console.log(`Created Google Form for ${topic}:`, form.getPublishedUrl());
    } catch (error) {
      console.error("Error parsing JSON response:", error);
    }
  };
  
  


  // useEffect hook to generate questions for each topic when component mounts
  useEffect(() => {
    group.Topics.forEach((topic) => {
      generateQuestions(topic);
    });
  }, [group]);

  return (
    <div className="test-page">
      <div className="test-header">
        <h1>{group.Subject} Test</h1>
        <h2>{group.GroupName} Group</h2>
      </div>
      <div className="topics-list">
        <h2>Topics</h2>
        <div>
          <ul>
            {group.Topics.map((topic, index) => (
              <li key={index}>
                <span className="bullet">â€¢</span> {topic}
              </li>
            ))}
          </ul>
        </div>
      </div>
      <div className="generated-questions">
        <h2>Generated Questions</h2>
        {questions.map((topicQuestions, index) => (
          <div key={index}>
            <h3>{topicQuestions.topic}</h3>
            <ul>
              {topicQuestions.questions.map((question, idx) => (
                <li key={idx}>{question}</li>
              ))}
            </ul>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Tests;
